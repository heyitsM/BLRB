generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id       String    @id @default(uuid())
  tagInfo String    @unique
  profiles    Profile[] @relation("ProfileToTag")
  posts       Post[] @relation("PostToTag")
  portfolioItems PortfolioItem[] @relation("PortfolioItemToTag")
}

model User {
  id                                    String                  @id @default(uuid())
  email                                 String                  @unique
  first_name                            String
  last_name                             String
  username                              String                  @unique
  password                              String
  created_at                            DateTime                @default(now()) @updatedAt
  role                                  Role?
  Comment                               Comment[]
  commissionAcceptor                    Commission[]            @relation("ArtistToCommission")
  commissionRequester                   Commission[]            @relation("CommissionerToCommission")
  Following_Following_blrbo_idToUser    Following[]             @relation("Following_blrbo_idToUser")
  Following_Following_follower_idToUser Following[]             @relation("Following_follower_idToUser")
  portfolio                             Portfolio?
  Post                                  Post[]
  PostLike                              PostLike[]
  professionalArtistInfo                ProfessionalArtistInfo?
  profile                               Profile?
  recruiterInfo                         RecruiterInfo?
}

model Profile {
  id               String   @id @default(uuid())
  bio              String?
  userId           String   @unique
  display_name     String?
  use_display_name Boolean  @default(false)
  profile_pic      String?
  update_date      DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags             Tag[]    @relation("ProfileToTag")
}

model Portfolio {
  id     String          @id @default(uuid())
  userId String          @unique
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  PortfolioItem[]
}

model PortfolioItem {
  id          String    @id @default(uuid())
  portfolioId String
  title       String
  description String?
  date_added  DateTime  @default(now())
  img         String?
  tags        Tag[]  @relation("PortfolioItemToTag")
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model ProfessionalArtistInfo {
  commissionRules      String?
  stripeAccountID       String
  acceptingCommissions Boolean @default(false)
  id                    String  @id @unique
  resume                String?
  user                  User    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model RecruiterInfo {
  id            String  @id @unique
  company       String
  position      String
  user          User    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Commission {
  id              String            @id @default(uuid())
  artistId       String
  commissionerId String
  title           String
  description     String
  notes           String?
  price           Float?
  dateCreated    DateTime          @default(now())
  dateUpdated    DateTime          @default(now()) @updatedAt
  status          Commission_Status @default(REQUESTED)
  artist          User              @relation("ArtistToCommission", fields: [artistId], references: [id], onDelete: Cascade)
  commissioner    User              @relation("CommissionerToCommission", fields: [commissionerId], references: [id], onDelete: Cascade)
}

model Post {
  id           String     @id @default(uuid())
  userId       String
  img          String?
  body         String
  dateCreated DateTime   @default(now())
  numLikes    Int        @default(0)
  comment      Comment[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes        PostLike[]
  tags         Tag[]      @relation("PostToTag")
}

model PostLike {
  id         String   @id @default(uuid())
  userId     String
  postId     String
  dateLiked DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String   @id @default(uuid())
  userId       String
  postId       String
  dateCreated DateTime @default(now())
  body         String
  Post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Following {
  id                               String   @id @default(uuid())
  followerId                      String
  blrboId                         String
  dateFollowed                    DateTime @default(now())
  User_Following_blrbo_idToUser    User     @relation("Following_blrbo_idToUser", fields: [blrboId], references: [id], onDelete: Cascade)
  User_Following_follower_idToUser User     @relation("Following_follower_idToUser", fields: [followerId], references: [id], onDelete: Cascade)
}

enum Role {
  RECRUITER
  ARTIST
}

enum Commission_Status {
  REQUESTED
  PENDING
  REJECTED
  ACCEPTED
  PAID
  COMPLETED
}
