generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEV_URL")
}

model Tag {
  id              String    @id @default(uuid())
  tagInfo         String    @unique
  profiles        Profile[] @relation("ProfileToTag")
  posts           Post[] @relation("PostToTag")
  portfolioItems  PortfolioItem[] @relation("PortfolioItemToTag")
}

model User {
  id                                    String                  @id @default(uuid())
  email                                 String                  @unique
  firstName                             String
  lastName                              String
  username                              String                  @unique
  password                              String
  createdAt                             DateTime                @default(now())
  updatedAt                             DateTime                @default(now()) @updatedAt
  profile                               Profile?
  isDeleted                             Boolean                 @default(false)
  role                                  Role                    @default(ARTIST)
}

model Profile {
  id                                    String   @id @default(uuid())
  bio                                   String?
  userId                                String   @unique
  displayName                           String?
  profilePic                            String?
  createdAt                             DateTime @default(now()) @updatedAt
  updatedAt                             DateTime @default(now()) @updatedAt
  user                                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                                  Tag[]    @relation("ProfileToTag")
  comment                               Comment[]
  commissionAcceptor                    Commission[]            @relation("ArtistToCommission")
  commissionRequester                   Commission[]            @relation("CommissionerToCommission")
  following_Following_blrbo_idToUser    Following[]             @relation("Following_blrbo_idToProfile")
  following_Following_follower_idToUser Following[]             @relation("Following_follower_idToProfile")
  portfolio                             Portfolio?
  post                                  Post[]
  postLike                              PostLike[]
  portfolioIsShown                      Boolean        @default(false)
  commissionIsShown                     Boolean       @default(false)
  commissionHandling                    CommissionHandling?
}

model Portfolio {
  id        String          @id @default(uuid())
  userId    String          @unique
  profile   Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     PortfolioItem[]
}

model PortfolioItem {
  id          String    @id @default(uuid())
  portfolioId String
  title       String
  description String?
  dateAdded   DateTime  @default(now())
  img         String?
  tags        Tag[]  @relation("PortfolioItemToTag")
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  isShown     Boolean @default(false)
}

model CommissionHandling {
  commissionRules       String?
  stripeAccountID       String
  acceptingCommissions  Boolean @default(false)
  id                    String  @id @unique
  profile               Profile    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Commission {
  id              String            @id @default(uuid())
  artistId        String
  commissionerId  String
  title           String
  description     String
  notes           String?
  price           Float?
  dateCreated     DateTime          @default(now())
  dateUpdated     DateTime          @default(now()) @updatedAt
  status          Commission_Status @default(REQUESTED)
  artist          Profile              @relation("ArtistToCommission", fields: [artistId], references: [id], onDelete: Cascade)
  commissioner    Profile              @relation("CommissionerToCommission", fields: [commissionerId], references: [id], onDelete: Cascade)
}

model Post {
  id              String     @id @default(uuid())
  profileId       String
  img             String?
  body            String
  dateCreated     DateTime   @default(now())
  numLikes        Int        @default(0)
  comment         Comment[]
  profile         Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  likes           PostLike[]
  tags            Tag[]      @relation("PostToTag")
}

model PostLike {
  id            String   @id @default(uuid())
  profileId     String
  postId        String
  dateLiked     DateTime @default(now())
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String   @id @default(uuid())
  userId       String
  postId       String
  dateCreated  DateTime @default(now())
  body         String
  Post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User         Profile     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Following {
  id                               String   @id @default(uuid())
  followerId                       String
  blrboId                          String
  dateFollowed                     DateTime @default(now())
  User_Following_blrbo_idToUser    Profile     @relation("Following_blrbo_idToProfile", fields: [blrboId], references: [id], onDelete: Cascade)
  User_Following_follower_idToUser Profile     @relation("Following_follower_idToProfile", fields: [followerId], references: [id], onDelete: Cascade)
}

enum Commission_Status {
  REQUESTED
  PENDING
  REJECTED
  ACCEPTED
  PAID
  COMPLETED
}

enum Role {
  ADMIN
  ARTIST
}